name: Yolo5 Deployment

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set up SSH key
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem

    - name: Set up Docker Build
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push Docker image
      run: |
        cd yolo5
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/yolo5:latest .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/yolo5:latest

    - name: Get EC2 instance ID
      run: |
        INSTANCE_ID=$(aws autoscaling describe-auto-scaling-instances --query "AutoScalingInstances[0].InstanceId" --output text)
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

    - name: Get EC2 public IP
      id: get_public_ip
      run: |
        EC2_PUBLIC_IP=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
        echo "EC2_PUBLIC_IP_ASG=$EC2_PUBLIC_IP_ASG" >> $GITHUB_ENV

    - name: Deploy to AWS EC2
      run: |      
        # Retry SSH connection up to 5 times with a delay
        for attempt in {1..5}; do
          echo "Attempt $attempt to connect to ${{ env.EC2_PUBLIC_IP }}"
          if ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ env.EC2_PUBLIC_IP_ASG }} "echo 'SSH connection successful'"; then
            echo "SSH connection successful to ${{ env.EC2_PUBLIC_IP_ASG }}"
            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ env.EC2_PUBLIC_IP_ASG }} "sudo docker stop yolo5* || true"
            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ env.EC2_PUBLIC_IP_ASG }} "sudo docker rm yolo5* || true"
            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ env.EC2_PUBLIC_IP_ASG }} "sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/yolo5:latest"
            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ env.EC2_PUBLIC_IP_ASG }} "sudo docker run -d --name yolo5 ${{ secrets.DOCKERHUB_USERNAME }}/yolo5:latest"
            break
          else
            echo "SSH connection to ${{ env.EC2_PUBLIC_IP_ASG }} failed. Retrying in 10 seconds..."
            sleep 10
          fi
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}