on:
  push:
    paths:
      - 'polybot/**'
    branches:
      - main
jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set up Docker Build
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_REPO_USERNAME }}
        password: ${{ secrets.DOCKER_REPO_PASSWORD }}

    - name: Build and push Docker image
      run: |
        cd polybot
        POLY_BOT_IMAGE_NAME=image_polybot_am_project:${{ github.run_number }}
        docker build -t $POLY_BOT_IMAGE_NAME .
        docker tag $POLY_BOT_IMAGE_NAME ${{ secrets.DOCKER_REPO_USERNAME }}/$POLY_BOT_IMAGE_NAME
        docker push ${{ secrets.DOCKER_REPO_USERNAME }}/$POLY_BOT_IMAGE_NAME

    - name: Set up SSH key
      run: |
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem

    - name: Deploy to AWS EC2
      run: |  
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
        chmod 400 private_key.pem
        POLYBOT_INSTANCES=$(aws elbv2 describe-target-health --target-group-arn ${{ secrets.POLYBOT_TARGET_GROUP_ARN }} --query 'TargetHealthDescriptions[*].Target.Id' --output text --region ${{ secrets.AWS_REGION }})
        echo "POLYBOT_INSTANCES: $POLYBOT_INSTANCES"
    
        for instance in $POLYBOT_INSTANCES; do
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $instance --query 'Reservations[0].Instances[0].State.Name' --output text --region ${{ secrets.AWS_REGION }})
          
          
          if [ "$INSTANCE_STATE" != "running" ]; then
            echo "Instance $instance is $INSTANCE_STATE. Starting the instance..."
            aws ec2 start-instances --instance-ids $instance --region ${{ secrets.AWS_REGION }}
            
            echo "Waiting for instance $instance to be in running state..."
            aws ec2 wait instance-running --instance-ids $instance --region ${{ secrets.AWS_REGION }}
          fi
    
          INSTANCE_INFO=$(aws ec2 describe-instances --instance-ids $instance --query 'Reservations[0].Instances[0]' --output json --region ${{ secrets.AWS_REGION }})
          echo "Instance Info: $INSTANCE_INFO"
          PUBLIC_IP=$(echo $INSTANCE_INFO | jq -r '.PublicIpAddress')
    
          if [ "$PUBLIC_IP" == "null" ] || [ -z "$PUBLIC_IP" ]; then
            echo "No public IP found for instance $instance"
            continue
          fi
          echo "Instance ID: $instance, Public IP: $PUBLIC_IP"
    
          # Retry SSH connection up to 5 times with a delay
          for attempt in {1..5}; do
            echo "Attempt $attempt to connect to $PUBLIC_IP"
            if ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$PUBLIC_IP "echo 'SSH connection successful'"; then
              echo "SSH connection successful to $PUBLIC_IP"
              ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$PUBLIC_IP "sudo docker stop my_polybot || true"
              ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$PUBLIC_IP "docker system prune --force || true"
              ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$PUBLIC_IP "sudo docker pull ${{ secrets.DOCKER_REPO_USERNAME }}/$POLY_BOT_IMAGE_NAME"
              ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$PUBLIC_IP "sudo docker run --restart always --name my_polybot -p 8443:8443 ${{ secrets.DOCKER_REPO_USERNAME }}/$POLY_BOT_IMAGE_NAME"
              break
            else
              echo "SSH connection to $PUBLIC_IP failed. Retrying in 10 seconds..."
              sleep 10
            fi
          done
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}